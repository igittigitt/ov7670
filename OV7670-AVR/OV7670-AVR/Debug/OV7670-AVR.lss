
OV7670-AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000866  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000746  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000450  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040d  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "avr/delay.h"

#include "SCCB.h"

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	char Test;
    while (1) 
    {
		SCCB_Read(0x0A,&Test);
  a0:	be 01       	movw	r22, r28
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	7f 4f       	sbci	r23, 0xFF	; 255
  a6:	8a e0       	ldi	r24, 0x0A	; 10
  a8:	0e 94 60 00 	call	0xc0	; 0xc0 <SCCB_Read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f e9       	ldi	r18, 0x9F	; 159
  ae:	86 e8       	ldi	r24, 0x86	; 134
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x1c>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x26>
  bc:	00 00       	nop
  be:	f0 cf       	rjmp	.-32     	; 0xa0 <main+0xa>

000000c0 <SCCB_Read>:
	*	According to the Data sheet of the SCCB-Interface a Read action is 
	*	fulfilled by a 2-Phase Write transmission followed by a 2-Phase read Transmission
	*/

	//To activate the TWI-Interface the Interrupt Flag is cleared by writing a 1 to it, the start condition is send and the 2-Wire Interface is activated
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); 
  c0:	94 ea       	ldi	r25, 0xA4	; 164
  c2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait until interrupt Flag is set, which means that the start condition is send
	while(!(TWCR & (1<<TWINT)));
  c6:	ec eb       	ldi	r30, 0xBC	; 188
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	99 23       	and	r25, r25
  ce:	ec f7       	brge	.-6      	; 0xca <SCCB_Read+0xa>
			//return false;
		//}

	//1st-Phase
	//insert the slave write address into the Two-Wire Data Register and indicate a write transmission by setting the LSB to a logical 0
	TWDR = (OV7670_Address<<1) & ~(0x01);
  d0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <OV7670_Address>
  d4:	99 0f       	add	r25, r25
  d6:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//start the transmission on the bus
	TWCR = (1<<TWINT) | (1<<TWEN);
  da:	94 e8       	ldi	r25, 0x84	; 132
  dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait until interrupt Flag is set, which means that the data is send
	while(!(TWCR & (1<<TWINT)));
  e0:	ec eb       	ldi	r30, 0xBC	; 188
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	99 23       	and	r25, r25
  e8:	ec f7       	brge	.-6      	; 0xe4 <SCCB_Read+0x24>
		//return false;
	//}

	//2nd-Phase
	//write the Sub-Address to the Two-Wire Data Register
	TWDR= SubAddress;
  ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//start the transmission on the bus
	TWCR = (1<<TWINT) | (1<<TWEN);
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait until interrupt Flag is set, which means that the data is send
	while(!(TWCR & (1<<TWINT)));
  f4:	ec eb       	ldi	r30, 0xBC	; 188
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	ec f7       	brge	.-6      	; 0xf8 <SCCB_Read+0x38>

	/* The 2-Phase write transmission is then followed by a 2-Phase read Transmission


	*/
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  fe:	84 ea       	ldi	r24, 0xA4	; 164
 100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait until interrupt Flag is set, which means that the start condition is send
	while(!(TWCR & (1<<TWINT)));
 104:	ec eb       	ldi	r30, 0xBC	; 188
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 23       	and	r24, r24
 10c:	ec f7       	brge	.-6      	; 0x108 <SCCB_Read+0x48>
		//return false;
	//}

	//1st-Phase
	//insert the slave read address into the Two-Wire Data Register and indicate a read transmission by setting the LSB to a logical 1
	TWDR = (OV7670_Address<<1) | (0x01);
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <OV7670_Address>
 112:	88 0f       	add	r24, r24
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//start the transmission on the bus
	TWCR = (1<<TWINT) | (1<<TWEN);
 11a:	84 e8       	ldi	r24, 0x84	; 132
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait until interrupt Flag is set, which means that the data is send
	while(!(TWCR & (1<<TWINT)));
 120:	ec eb       	ldi	r30, 0xBC	; 188
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	ec f7       	brge	.-6      	; 0x124 <SCCB_Read+0x64>
	//{
		////Error Treatment
		//return false;
	//}

	*readData = TWDR;
 12a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 12e:	fb 01       	movw	r30, r22
 130:	80 83       	st	Z, r24
	{
		//Error Treatment
		return false;
	}
	*/
 }
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
